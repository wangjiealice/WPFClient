<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.SignalR.Client.Core</name>
    </assembly>
    <members>
        <member name="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.ServerTimeout">
            <summary>
            Gets or sets the server timeout interval for the connection. Changes to this value
            will not be applied until the Keep Alive timer is next reset.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Sockets.Internal.ForceAsyncTaskExtensions.ForceAsync(System.Threading.Tasks.Task)">
            <summary>
            Returns an awaitable/awaiter that will ensure the continuation is executed
            asynchronously on the thread pool, even if the task is already completed
            by the time the await occurs.  Effectively, it is equivalent to awaiting
            with ConfigureAwait(false) and then queuing the continuation with Task.Run,
            but it avoids the extra hop if the continuation already executed asynchronously.
            </summary>
        </member>
    </members>
</doc>
